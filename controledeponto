import os
import json
import pickle
from datetime import datetime, timedelta
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Constantes do sistema
ARQUIVO_DADOS = "ponto.json"
SALARIO_BASE = 5096.52
HORAS_MENSAIS = 220  # Jornada mensal padr√£o de 220 horas
VALOR_HORA = SALARIO_BASE / HORAS_MENSAIS
JORNADA_DIARIA = timedelta(hours=8)
DRIVE_FOLDER_NAME = "PontoGerenciado"

FERIADOS = ["2024-12-24", "2024-12-25", "2024-12-31", "2025-01-01"]
SCOPES = ["https://www.googleapis.com/auth/drive.file"]

# ------------------ Fun√ß√µes de Google Drive -------------------
def autenticar_google_drive():
    creds = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)
        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)
    return build("drive", "v3", credentials=creds)


def criar_pasta_no_drive(service):
    query = f"name='{DRIVE_FOLDER_NAME}' and mimeType='application/vnd.google-apps.folder'"
    response = service.files().list(q=query, spaces="drive").execute()
    items = response.get("files", [])
    if not items:
        file_metadata = {"name": DRIVE_FOLDER_NAME, "mimeType": "application/vnd.google-apps.folder"}
        folder = service.files().create(body=file_metadata, fields="id").execute()
        print(f"Pasta '{DRIVE_FOLDER_NAME}' criada no Google Drive.")
        return folder.get("id")
    return items[0].get("id")


def salvar_arquivo_no_drive(service, folder_id, arquivo_nome):
    file_metadata = {"name": arquivo_nome, "parents": [folder_id]}
    media = MediaFileUpload(arquivo_nome, mimetype="application/json")
    service.files().create(body=file_metadata, media_body=media).execute()
    print(f"‚úÖ Arquivo '{arquivo_nome}' salvo no Google Drive.")

# ------------------ Fun√ß√µes de Registro de Ponto -------------------
def carregar_dados(arquivo):
    return json.load(open(arquivo)) if os.path.exists(arquivo) else {}


def salvar_dados(arquivo, dados):
    with open(arquivo, "w") as f:
        json.dump(dados, f, indent=4)


def registrar_batida(dados):
    hoje = datetime.now().strftime("%Y-%m-%d")
    if hoje not in dados:
        dados[hoje] = []
    if len(dados[hoje]) < 4:
        hora = datetime.now().strftime("%H:%M:%S")
        dados[hoje].append(hora)
        print(f"‚úÖ Batida registrada: {hora}")
    else:
        print("‚ö†Ô∏è Todas as 4 batidas j√° foram registradas para hoje!")
    salvar_dados(ARQUIVO_DADOS, dados)


def editar_batida(dados):
    hoje = datetime.now().strftime("%Y-%m-%d")
    if hoje not in dados or not dados[hoje]:
        print("‚ö†Ô∏è Nenhuma batida registrada hoje para editar!")
        return

    print(f"\nüìÖ Batidas registradas para {hoje}:")
    for i, batida in enumerate(dados[hoje], start=1):
        print(f"{i}. {batida}")

    try:
        numero = int(input("Digite o n√∫mero da batida que deseja editar: "))
        if numero < 1 or numero > len(dados[hoje]):
            print("‚ùå N√∫mero inv√°lido.")
            return

        novo_horario = input(f"Digite o novo hor√°rio para a batida {numero} (HH:MM:SS): ")
        datetime.strptime(novo_horario, "%H:%M:%S")  # Valida o formato
        dados[hoje][numero - 1] = novo_horario
        print(f"‚úÖ Batida {numero} editada para: {novo_horario}")
        salvar_dados(ARQUIVO_DADOS, dados)

    except ValueError:
        print("‚ùå Entrada inv√°lida. Use o formato HH:MM:SS.")


def registrar_falta(dados):
    hoje = datetime.now().strftime("%Y-%m-%d")
    if hoje not in dados:
        dados[hoje] = ["falta"]
        print(f"‚ö†Ô∏è Falta registrada para {hoje}.")
    else:
        print(f"‚ö†Ô∏è J√° h√° registro para {hoje}.")
    salvar_dados(ARQUIVO_DADOS, dados)


def exibir_relatorio_dia(data, batidas):
    if len(batidas) < 4 or "falta" in batidas:
        print(f"‚ö†Ô∏è {data}: Dia incompleto ou falta registrada.")
        return timedelta(), timedelta()

    entrada = datetime.strptime(batidas[0], "%H:%M:%S")
    saida_intervalo = datetime.strptime(batidas[1], "%H:%M:%S")
    retorno_intervalo = datetime.strptime(batidas[2], "%H:%M:%S")
    saida = datetime.strptime(batidas[3], "%H:%M:%S")
    total_trabalhado = (saida_intervalo - entrada) + (saida - retorno_intervalo)
    horas_extras = max(total_trabalhado - JORNADA_DIARIA, timedelta())
    horas_devidas = max(JORNADA_DIARIA - total_trabalhado, timedelta())
    print(f"{data}: ‚è≥ Trabalhado: {total_trabalhado}, ‚è∞ Extras: {horas_extras}, ‚ùå Devidas: {horas_devidas}")
    return horas_extras, horas_devidas


def calcular_valores(dados):
    horas_extras_totais = timedelta()
    horas_devidas_totais = timedelta()
    
    for data, batidas in sorted(dados.items()):
        dia_semana = datetime.strptime(data, "%Y-%m-%d").weekday()
        if dia_semana >= 5 or data in FERIADOS:
            continue  # Ignorar s√°bados, domingos e feriados
        
        horas_extras, horas_devidas = exibir_relatorio_dia(data, batidas)
        horas_extras_totais += horas_extras
        horas_devidas_totais += horas_devidas
    
    valor_extras = (horas_extras_totais.total_seconds() / 3600) * VALOR_HORA
    valor_devido = (horas_devidas_totais.total_seconds() / 3600) * VALOR_HORA
    print(f"\nüíº Valor por horas extras: R$ {valor_extras:.2f}")
    print(f"üíº Desconto por horas devidas: R$ {valor_devido:.2f}")

# ------------------ Menu Principal -------------------
def menu():
    dados = carregar_dados(ARQUIVO_DADOS)
    service = autenticar_google_drive()
    folder_id = criar_pasta_no_drive(service)

    while True:
        print("\n=== Sistema de Gerenciamento de Ponto ===")
        print("1. Registrar batida de ponto")
        print("2. Editar hor√°rio de batida")
        print("3. Registrar falta")
        print("4. Gerar relat√≥rio di√°rio")
        print("5. Salvar dados no Google Drive")
        print("6. Calcular valores de extras e devidos")
        print("7. Sair")
        opcao = input("Escolha uma op√ß√£o: ").strip()

        if opcao == "1":
            registrar_batida(dados)
        elif opcao == "2":
            editar_batida(dados)
        elif opcao == "3":
            registrar_falta(dados)
        elif opcao == "4":
            for data, batidas in sorted(dados.items()):
                exibir_relatorio_dia(data, batidas)
        elif opcao == "5":
            salvar_arquivo_no_drive(service, folder_id, ARQUIVO_DADOS)
        elif opcao == "6":
            calcular_valores(dados)
        elif opcao == "7":
            print("üîö Saindo do sistema. At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")

if __name__ == "__main__":
    menu()
