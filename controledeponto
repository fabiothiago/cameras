import os
import json
import pickle
from datetime import datetime, timedelta
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Constantes do sistema
ARQUIVO_DADOS = "ponto.json"
ARQUIVO_PAGAMENTO = "pagamento.json"
SALARIO_BASE = 5096.52
HORAS_MENSAIS = 220  # Jornada mensal padr√£o
VALOR_HORA = SALARIO_BASE / HORAS_MENSAIS
JORNADA_DIARIA = timedelta(hours=8)
DRIVE_FOLDER_NAME = "PontoGerenciado"

# Escopo do Google Drive
SCOPES = ["https://www.googleapis.com/auth/drive.file"]

# ------------------ Fun√ß√µes de Google Drive -------------------
def autenticar_google_drive():
    """Autentica o Google Drive e retorna o servi√ßo."""
    creds = None
    if os.path.exists("token.pickle"):
        with open("token.pickle", "rb") as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        flow = InstalledAppFlow.from_client_secrets_file("credentials.json", SCOPES)
        creds = flow.run_local_server(port=0)
        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)
    return build("drive", "v3", credentials=creds)


def criar_pasta_no_drive(service):
    """Cria uma pasta no Google Drive se n√£o existir."""
    query = f"name='{DRIVE_FOLDER_NAME}' and mimeType='application/vnd.google-apps.folder'"
    response = service.files().list(q=query, spaces="drive").execute()
    items = response.get("files", [])
    if not items:
        file_metadata = {"name": DRIVE_FOLDER_NAME, "mimeType": "application/vnd.google-apps.folder"}
        folder = service.files().create(body=file_metadata, fields="id").execute()
        print(f"Pasta '{DRIVE_FOLDER_NAME}' criada no Google Drive.")
        return folder.get("id")
    return items[0].get("id")


def salvar_arquivo_no_drive(service, folder_id, arquivo_nome):
    """Salva um arquivo JSON no Google Drive."""
    file_metadata = {"name": arquivo_nome, "parents": [folder_id]}
    media = MediaFileUpload(arquivo_nome, mimetype="application/json")
    service.files().create(body=file_metadata, media_body=media).execute()
    print(f"‚úÖ Arquivo '{arquivo_nome}' salvo no Google Drive.")

# ------------------ Fun√ß√µes de Registro de Ponto -------------------
def carregar_dados(arquivo):
    """Carrega dados de um arquivo JSON."""
    return json.load(open(arquivo)) if os.path.exists(arquivo) else {}


def salvar_dados(arquivo, dados):
    """Salva dados em um arquivo JSON."""
    with open(arquivo, "w") as f:
        json.dump(dados, f, indent=4)


def registrar_batida(dados):
    """Registra as batidas de ponto."""
    hoje = datetime.now().strftime("%Y-%m-%d")
    if hoje not in dados:
        dados[hoje] = []
    if len(dados[hoje]) < 4:
        hora = datetime.now().strftime("%H:%M:%S")
        dados[hoje].append(hora)
        print(f"‚úÖ Batida registrada: {hora}")
    else:
        print("‚ö†Ô∏è Todas as 4 batidas j√° foram registradas para hoje!")
    salvar_dados(ARQUIVO_DADOS, dados)


def registrar_falta(dados):
    """Registra uma falta no dia atual."""
    hoje = datetime.now().strftime("%Y-%m-%d")
    dados[hoje] = ["falta"]
    print(f"‚ö†Ô∏è Falta registrada no dia {hoje}.")
    salvar_dados(ARQUIVO_DADOS, dados)

# ------------------ Fun√ß√µes de Relat√≥rios -------------------
def calcular_trabalho(batidas):
    """Calcula as horas trabalhadas em um dia."""
    if len(batidas) < 4 or batidas == ["falta"]:
        return timedelta()
    entrada = datetime.strptime(batidas[0], "%H:%M:%S")
    saida_intervalo = datetime.strptime(batidas[1], "%H:%M:%S")
    retorno_intervalo = datetime.strptime(batidas[2], "%H:%M:%S")
    saida = datetime.strptime(batidas[3], "%H:%M:%S")
    return (saida_intervalo - entrada) + (saida - retorno_intervalo)


def gerar_relatorio(dados, periodo):
    """Gera relat√≥rio de ponto di√°rio, semanal ou mensal."""
    print(f"\nüìã Relat√≥rio {periodo.capitalize()}")
    total_trabalhado = timedelta()
    saldo_devedor = timedelta()
    hoje = datetime.now()

    if periodo == "diario":
        inicio = hoje
        fim = hoje
    elif periodo == "semanal":
        inicio = hoje - timedelta(days=hoje.weekday())  # Segunda-feira
        fim = inicio + timedelta(days=6)
    elif periodo == "mensal":
        inicio = hoje.replace(day=1)
        fim = (inicio + timedelta(days=32)).replace(day=1) - timedelta(days=1)

    print(f"üìÖ Per√≠odo: {inicio.strftime('%Y-%m-%d')} a {fim.strftime('%Y-%m-%d')}")

    for data, batidas in sorted(dados.items()):
        data_formatada = datetime.strptime(data, "%Y-%m-%d")
        if inicio <= data_formatada <= fim:
            horas_dia = calcular_trabalho(batidas)
            total_trabalhado += horas_dia
            if horas_dia < JORNADA_DIARIA:
                saldo_devedor += (JORNADA_DIARIA - horas_dia)
            print(f"{data}: {' | '.join(batidas)} ‚Üí {horas_dia}")

    print(f"\n‚è≥ Total trabalhado: {total_trabalhado}")
    print(f"üíº Saldo devedor: {saldo_devedor}")

# ------------------ Menu Principal -------------------
def menu():
    dados = carregar_dados(ARQUIVO_DADOS)
    service = autenticar_google_drive()
    folder_id = criar_pasta_no_drive(service)

    while True:
        print("\n=== Sistema de Gerenciamento de Ponto ===")
        print("1. Registrar batida de ponto")
        print("2. Registrar falta")
        print("3. Editar hor√°rio de batida")
        print("4. Gerar relat√≥rio di√°rio")
        print("5. Gerar relat√≥rio semanal")
        print("6. Gerar relat√≥rio mensal")
        print("7. Salvar dados no Google Drive")
        print("8. Sair")
        opcao = input("Escolha uma op√ß√£o: ").strip()

        if opcao == "1":
            registrar_batida(dados)
        elif opcao == "2":
            registrar_falta(dados)
        elif opcao == "3":
            editar_batida(dados)
        elif opcao == "4":
            gerar_relatorio(dados, "diario")
        elif opcao == "5":
            gerar_relatorio(dados, "semanal")
        elif opcao == "6":
            gerar_relatorio(dados, "mensal")
        elif opcao == "7":
            salvar_arquivo_no_drive(service, folder_id, ARQUIVO_DADOS)
        elif opcao == "8":
            print("üîö Saindo do sistema. At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")

if __name__ == "__main__":
    menu()
