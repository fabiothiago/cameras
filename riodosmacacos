import requests
from bs4 import BeautifulSoup
import pandas as pd
import logging

# Configura√ß√£o do logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Constantes
COTA_TRANSBORDAMENTO_PARACAMBI = 2.88  # Cota de transbordamento do rio em Paracambi
COTA_TRANSBORDAMENTO_PAULO_FRONTIN = 3.31  # Cota de transbordamento do rio em Paulo Frontin
FATOR_SENSIBILIDADE = 0.02   # Aumento estimado do n√≠vel por mm de chuva
AREA_DRENAGEM_RIO_MACACOS = 83  # √Årea de drenagem do Rio dos Macacos em km¬≤
CHAVE_API_WEATHER = "46506638d20f47c486705852241712"  # Chave da WeatherAPI
CIDADE_PARACAMBI = "Paracambi"  # Nome da cidade de Paracambi
CIDADE_PAULO_FRONTIN = "Paulo Frontin"  # Nome da cidade de Paulo Frontin
URL_WEATHERAPI_PARACAMBI = f"http://api.weatherapi.com/v1/forecast.json?key={CHAVE_API_WEATHER}&q={CIDADE_PARACAMBI}&days=3&aqi=no&alerts=no"
URL_WEATHERAPI_PAULO_FRONTIN = f"http://api.weatherapi.com/v1/forecast.json?key={CHAVE_API_WEATHER}&q={CIDADE_PAULO_FRONTIN}&days=3&aqi=no&alerts=no"
URL_RIO_PARACAMBI = "http://alertadecheias.inea.rj.gov.br/alertadecheias/224333320.html"  # URL do Rio de Paracambi
URL_RIO_PAULO_FRONTIN = "http://alertadecheias.inea.rj.gov.br/alertadecheias/224351220.html"  # URL do Rio de Paulo Frontin

def extrair_dados_nivel_rio(url):
    """Extrai os dados do n√≠vel do rio da p√°gina HTML."""
    try:
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')

        table = soup.find('table', {'id': 'Table'})
        data = []
        for row in table.find_all('tr'):
            cols = row.find_all('td')
            cols = [ele.text.strip() for ele in cols]
            if len(cols) >= 2:  # Garante que tenha ao menos duas colunas
                data.append([cols[0], cols[-1]])  # Pega Data e Hora e N√≠vel do Rio

        df = pd.DataFrame(data[1:], columns=['Data e Hora', 'N√≠vel do rio (m)'])
        df['N√≠vel do rio (m)'] = pd.to_numeric(df['N√≠vel do rio (m)'], errors='coerce')

        return df
    except Exception as e:
        logging.error(f"Erro ao extrair dados do n√≠vel do rio: {e}")
        return None

def obter_previsao_weatherapi(url):
    """Obt√©m a previs√£o do tempo detalhada para os pr√≥ximos 3 dias usando WeatherAPI."""
    try:
        response = requests.get(url)
        response.raise_for_status()
        dados = response.json()

        previsao = [
            {
                "data": dia['date'],
                "temp_max": dia['day']['maxtemp_c'],
                "temp_min": dia['day']['mintemp_c'],
                "chuva_mm": dia['day']['totalprecip_mm'],
                "condicao": dia['day']['condition']['text']
            }
            for dia in dados['forecast']['forecastday']
        ]
        return previsao
    except Exception as e:
        logging.error(f"Erro ao obter previs√£o do tempo: {e}")
        return None

def gerar_previsao_nivel_rio_paracambi_com_chuva_paulo_frontin(nivel_atual, previsao_chuva_paracambi, previsao_chuva_paulo_frontin):
    """Gera a previs√£o do n√≠vel do rio em Paracambi com base na precipita√ß√£o prevista, incluindo a chuva em Paulo Frontin."""
    previsao = []
    for dia in previsao_chuva_paracambi:
        # Incorporar a chuva de Paulo Frontin para o c√°lculo de Paracambi
        chuva_adicional = next((item['chuva_mm'] for item in previsao_chuva_paulo_frontin if item['data'] == dia['data']), 0)
        # Ajustar o impacto da precipita√ß√£o com base na √°rea de drenagem
        aumento_estimado = ((dia['chuva_mm'] + chuva_adicional) * FATOR_SENSIBILIDADE) * (AREA_DRENAGEM_RIO_MACACOS / 83)  # Propor√ß√£o da √°rea
        nivel_previsto = round(nivel_atual + aumento_estimado, 2)
        risco = classificar_risco(nivel_previsto)
        previsao.append({
            "data": dia['data'],
            "chuva_mm_paracambi": dia['chuva_mm'],
            "chuva_mm_paulo_frontin": chuva_adicional,
            "nivel_previsto": nivel_previsto,
            "temp_max": dia['temp_max'],
            "temp_min": dia['temp_min'],
            "condicao": dia['condicao'],
            "risco": risco
        })
    return previsao

def classificar_risco(nivel):
    """Classifica o risco baseado no n√≠vel previsto do rio."""
    if nivel >= COTA_TRANSBORDAMENTO_PARACAMBI:
        return "‚ö†Ô∏è Risco Cr√≠tico - Transbordamento iminente!"
    elif nivel >= COTA_TRANSBORDAMENTO_PARACAMBI * 0.7:
        return "‚ö†Ô∏è Risco Alto - N√≠vel pr√≥ximo ao limite."
    else:
        return "‚úÖ Risco Baixo - Condi√ß√µes est√°veis."

def gerar_relatorio(nivel_atual, previsao_rio):
    """Gera um relat√≥rio consolidado do estado atual e previs√£o do n√≠vel do rio."""
    relatorio = (f"\nüîπ **Relat√≥rio do Rio dos Macacos** üîπ\n"
                 f"N√≠vel atual: {nivel_atual:.2f} m\n"
                 f"Cota de transbordamento: {COTA_TRANSBORDAMENTO_PARACAMBI:.2f} m\n\n")

    for dia in previsao_rio:
        relatorio += (f"üìÖ **Previs√£o para {dia['data']}**:\n"
                      f"Condi√ß√£o: {dia['condicao']}\n"
                      f"Temperatura: {dia['temp_min']}¬∞C - {dia['temp_max']}¬∞C\n"
                      f"Precipita√ß√£o prevista: {dia['chuva_mm_paracambi']} mm (Paracambi) + {dia['chuva_mm_paulo_frontin']} mm (Paulo Frontin)\n"
                      f"N√≠vel previsto do rio: {dia['nivel_previsto']} m\n"
                      f"Classifica√ß√£o: {dia['risco']}\n\n")

    return relatorio

if __name__ == "__main__":
    logging.info("Iniciando o monitoramento do n√≠vel do rio e previs√£o do tempo.")
    
    # Extra√ß√£o do n√≠vel do rio em Paracambi
    df_nivel_rio_paracambi = extrair_dados_nivel_rio(URL_RIO_PARACAMBI)
    if df_nivel_rio_paracambi is not None and not df_nivel_rio_paracambi.empty:
        nivel_atual_paracambi = df_nivel_rio_paracambi['N√≠vel do rio (m)'].iloc[-1]
        logging.info(f"N√≠vel atual do rio em Paracambi: {nivel_atual_paracambi:.2f} m.")

        # Obten√ß√£o da previs√£o do tempo para Paracambi
        previsao_tempo_paracambi = obter_previsao_weatherapi(URL_WEATHERAPI_PARACAMBI)
        if previsao_tempo_paracambi:
            # Extra√ß√£o do n√≠vel do rio em Paulo Frontin
            df_nivel_rio_paulo_frontin = extrair_dados_nivel_rio(URL_RIO_PAULO_FRONTIN)
            if df_nivel_rio_paulo_frontin is not None and not df_nivel_rio_paulo_frontin.empty:
                nivel_atual_paulo_frontin = df_nivel_rio_paulo_frontin['N√≠vel do rio (m)'].iloc[-1]
                logging.info(f"N√≠vel atual do rio em Paulo Frontin: {nivel_atual_paulo_frontin:.2f} m.")
                
                # Obten√ß√£o da previs√£o do tempo para Paulo Frontin
                previsao_tempo_paulo_frontin = obter_previsao_weatherapi(URL_WEATHERAPI_PAULO_FRONTIN)
                if previsao_tempo_paulo_frontin:
                    # C√°lculo da previs√£o do n√≠vel do rio em Paracambi com a chuva de Paulo Frontin
                    previsao_nivel_rio_paracambi = gerar_previsao_nivel_rio_paracambi_com_chuva_paulo_frontin(nivel_atual_paracambi, previsao_tempo_paracambi, previsao_tempo_paulo_frontin)
                    if previsao_nivel_rio_paracambi:
                        # Gera√ß√£o do relat√≥rio consolidado
                        relatorio = gerar_relatorio(nivel_atual_paracambi, previsao_nivel_rio_paracambi)
                        print(relatorio)
                    else:
                        logging.error("Erro ao calcular a previs√£o do n√≠vel do rio em Paracambi.")
                else:
                    logging.error("Erro ao obter a previs√£o do tempo para Paulo Frontin.")
            else:
                logging.error("Erro ao carregar os dados do n√≠vel do rio em Paulo Frontin.")
        else:
            logging.error("Erro ao obter a previs√£o do tempo em Paracambi.")
    else:
        logging.error("Erro ao carregar os dados do n√≠vel do rio em Paracambi.")
